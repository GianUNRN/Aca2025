$date
	Thu Oct  2 18:17:08 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top_tb $end
$var wire 32 ! reg_data_2 [31:0] $end
$var wire 32 " reg_data_1 [31:0] $end
$var wire 5 # rd [4:0] $end
$var wire 32 $ pc [31:0] $end
$var wire 8 % leds_out [7:0] $end
$var wire 32 & data_out [31:0] $end
$var wire 32 ' alu_result [31:0] $end
$var reg 1 ( clk $end
$var reg 1 ) reset $end
$var reg 8 * sw [7:0] $end
$scope module top $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var wire 8 + sw [7:0] $end
$var wire 32 , reg_data_2 [31:0] $end
$var wire 32 - reg_data_1 [31:0] $end
$var wire 5 . rd [4:0] $end
$var wire 32 / pc [31:0] $end
$var wire 1 0 mem_write $end
$var wire 8 1 leds_out [7:0] $end
$var wire 32 2 instr [31:0] $end
$var wire 32 3 data_out [31:0] $end
$var wire 4 4 cs [3:0] $end
$var wire 32 5 alu_result [31:0] $end
$var wire 1 6 Pc_src $end
$scope module ieu $end
$var wire 1 ( clk $end
$var wire 5 7 rs2 [4:0] $end
$var wire 5 8 rs1 [4:0] $end
$var wire 2 9 result_src [1:0] $end
$var wire 1 : reg_write $end
$var wire 32 ; reg_data_2 [31:0] $end
$var wire 32 < reg_data_1 [31:0] $end
$var wire 5 = rd [4:0] $end
$var wire 1 6 pc_src $end
$var wire 32 > pc [31:0] $end
$var wire 7 ? opcode [6:0] $end
$var wire 1 0 mem_write $end
$var wire 32 @ mem_data [31:0] $end
$var wire 32 A instr [31:0] $end
$var wire 3 B imm_src [2:0] $end
$var wire 32 C imm_ext [31:0] $end
$var wire 7 D funct7 [6:0] $end
$var wire 3 E funct3 [2:0] $end
$var wire 1 F flags $end
$var wire 4 G cs [3:0] $end
$var wire 2 H alu_src [1:0] $end
$var wire 1 I alu_result_src $end
$var wire 32 J alu_result [31:0] $end
$var wire 2 K alu_control [1:0] $end
$var reg 32 L alu_src_a [31:0] $end
$var reg 32 M alu_src_b [31:0] $end
$var reg 32 N ieu_result [31:0] $end
$var reg 32 O result [31:0] $end
$scope module alu_unit $end
$var wire 32 P a [31:0] $end
$var wire 32 Q b [31:0] $end
$var wire 3 R funct3 [2:0] $end
$var wire 2 S alu_control [1:0] $end
$var reg 32 T alu_result [31:0] $end
$upscope $end
$scope module comparer $end
$var wire 3 U funct3 [2:0] $end
$var wire 32 V r2 [31:0] $end
$var wire 32 W r1 [31:0] $end
$var reg 1 F eq $end
$upscope $end
$scope module control $end
$var wire 1 F flags $end
$var wire 3 X funct3 [2:0] $end
$var wire 7 Y funct7 [6:0] $end
$var wire 7 Z opcode [6:0] $end
$var reg 2 [ alu_control [1:0] $end
$var reg 1 I alu_result_src $end
$var reg 2 \ alu_src [1:0] $end
$var reg 4 ] cs [3:0] $end
$var reg 3 ^ imm_src [2:0] $end
$var reg 1 0 mem_write $end
$var reg 1 6 pc_src $end
$var reg 1 : reg_write $end
$var reg 2 _ result_src [1:0] $end
$upscope $end
$scope module reg_file $end
$var wire 1 ( clk $end
$var wire 5 ` ra1 [4:0] $end
$var wire 5 a ra2 [4:0] $end
$var wire 5 b wa [4:0] $end
$var wire 32 c wd [31:0] $end
$var wire 1 : we $end
$var wire 32 d rd2 [31:0] $end
$var wire 32 e rd1 [31:0] $end
$upscope $end
$scope module sign_ext $end
$var wire 3 f imm_src [2:0] $end
$var wire 32 g instr [31:0] $end
$var reg 32 h imm_ext [31:0] $end
$upscope $end
$scope begin Mux_alu_src_a $end
$upscope $end
$scope begin Mux_alu_src_b $end
$upscope $end
$scope begin Mux_result $end
$upscope $end
$scope begin Mux_write_reg $end
$upscope $end
$upscope $end
$scope module ifu $end
$var wire 1 6 Pc_src $end
$var wire 32 i alu_result [31:0] $end
$var wire 1 ( clk $end
$var wire 32 j pc [31:0] $end
$var wire 1 ) reset $end
$var wire 32 k instr [31:0] $end
$var reg 32 l pc_next [31:0] $end
$scope module instruction_rom $end
$var wire 8 m address [7:0] $end
$var wire 32 n data [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 o i [31:0] $end
$upscope $end
$upscope $end
$scope begin Pc_update $end
$upscope $end
$upscope $end
$scope module ios $end
$var wire 32 p alu_result [31:0] $end
$var wire 1 ( clk $end
$var wire 4 q cs [3:0] $end
$var wire 3 r funct3 [2:0] $end
$var wire 1 0 mem_write $end
$var wire 32 s reg_data_2 [31:0] $end
$var wire 1 ) rst $end
$var wire 8 t sw [7:0] $end
$var wire 1 u w_enable_data_mem $end
$var wire 8 v mem_data_3 [7:0] $end
$var wire 8 w mem_data_2 [7:0] $end
$var wire 8 x mem_data_1 [7:0] $end
$var wire 8 y mem_data_0 [7:0] $end
$var wire 8 z leds_out [7:0] $end
$var wire 3 { io_enable [2:0] $end
$var wire 8 | decoded_swithces [7:0] $end
$var wire 4 } cs_out [3:0] $end
$var reg 32 ~ data_out [31:0] $end
$var reg 32 !" mem_data_out [31:0] $end
$scope module io_controler_instance $end
$var wire 6 "" addr [5:0] $end
$var wire 4 #" cs_in [3:0] $end
$var wire 1 0 w_enable $end
$var reg 4 $" cs_out [3:0] $end
$var reg 3 %" io_enable [2:0] $end
$var reg 1 u w_enable_data_mem $end
$upscope $end
$scope module leds_instance $end
$var wire 1 ( clk $end
$var wire 8 &" data [7:0] $end
$var wire 1 '" en $end
$var wire 8 (" leds_out [7:0] $end
$var wire 1 ) rst $end
$var reg 8 )" leds_next [7:0] $end
$upscope $end
$scope module segmented_memory_instance $end
$var wire 5 *" addr [4:0] $end
$var wire 1 ( clk $end
$var wire 4 +" cs [3:0] $end
$var wire 32 ," data [31:0] $end
$var wire 1 u mem_write $end
$var wire 8 -" mem_data_3 [7:0] $end
$var wire 8 ." mem_data_2 [7:0] $end
$var wire 8 /" mem_data_1 [7:0] $end
$var wire 8 0" mem_data_0 [7:0] $end
$scope module mem0 $end
$var wire 5 1" addr [4:0] $end
$var wire 1 ( clk $end
$var wire 1 2" cs $end
$var wire 8 3" wd [7:0] $end
$var wire 1 u we $end
$var wire 8 4" rd [7:0] $end
$var parameter 32 5" WIDTH $end
$scope begin $ivl_for_loop1 $end
$var integer 32 6" i [31:0] $end
$upscope $end
$upscope $end
$scope module mem1 $end
$var wire 5 7" addr [4:0] $end
$var wire 1 ( clk $end
$var wire 1 8" cs $end
$var wire 8 9" wd [7:0] $end
$var wire 1 u we $end
$var wire 8 :" rd [7:0] $end
$var parameter 32 ;" WIDTH $end
$scope begin $ivl_for_loop1 $end
$var integer 32 <" i [31:0] $end
$upscope $end
$upscope $end
$scope module mem2 $end
$var wire 5 =" addr [4:0] $end
$var wire 1 ( clk $end
$var wire 1 >" cs $end
$var wire 8 ?" wd [7:0] $end
$var wire 1 u we $end
$var wire 8 @" rd [7:0] $end
$var parameter 32 A" WIDTH $end
$scope begin $ivl_for_loop1 $end
$var integer 32 B" i [31:0] $end
$upscope $end
$upscope $end
$scope module mem3 $end
$var wire 5 C" addr [4:0] $end
$var wire 1 ( clk $end
$var wire 1 D" cs $end
$var wire 8 E" wd [7:0] $end
$var wire 1 u we $end
$var wire 8 F" rd [7:0] $end
$var parameter 32 G" WIDTH $end
$scope begin $ivl_for_loop1 $end
$var integer 32 H" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module switches_instance $end
$var wire 8 I" decoded_swithces [7:0] $end
$var wire 8 J" sw [7:0] $end
$upscope $end
$scope begin MUX_DATA_READ $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 G"
b1000 A"
b1000 ;"
b1000 5"
$end
#0
$dumpvars
bx J"
bx I"
b100000 H"
b0 F"
b0 E"
0D"
b10111 C"
b100000 B"
b0 @"
b0 ?"
0>"
b10111 ="
b100000 <"
b0 :"
b0 9"
08"
b10111 7"
b100000 6"
b0 4"
b0 3"
02"
b10111 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b10111 *"
bx )"
bx ("
0'"
b0 &"
b0 %"
b0 $"
b0 #"
b10111 ""
b0 !"
b0 ~
b0 }
bx |
b0 {
bx z
b0 y
b0 x
b0 w
b0 v
0u
bx t
b0 s
b0 r
b0 q
b10111 p
b100000000 o
b1011100000000001000010011 n
b0 m
b0 l
b1011100000000001000010011 k
b0 j
b10111 i
b10111 h
b1011100000000001000010011 g
b0 f
b0 e
b0 d
b10111 c
b100 b
b10111 a
b0 `
b0 _
b0 ^
b0 ]
b1 \
b0 [
b10011 Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b10111 T
b0 S
b0 R
b10111 Q
b0 P
b10111 O
b10111 N
b10111 M
b0 L
b0 K
b10111 J
0I
b1 H
b0 G
1F
b0 E
b0 D
b10111 C
b0 B
b1011100000000001000010011 A
b0 @
b10011 ?
b0 >
b100 =
b0 <
b0 ;
1:
b0 9
b0 8
b10111 7
06
b10111 5
b0 4
b0 3
b1011100000000001000010011 2
bx 1
00
b0 /
b100 .
b0 -
b0 ,
bx +
bx *
1)
0(
b10111 '
b0 &
bx %
b0 $
b100 #
b0 "
b0 !
$end
#5
b0 %
b0 1
b0 z
b0 ("
b0 )"
1(
#7
b1100011 |
b1100011 I"
b1100011 *
b1100011 +
b1100011 t
b1100011 J"
0)
#10
0(
#15
1'"
b1 {
b1 %"
b100000 O
b100000 c
02"
08"
0>"
0D"
b10111 &"
b10111 3"
b100000 ""
b0 *"
b0 1"
b0 7"
b0 ="
b0 C"
b100000 N
b0 }
b0 $"
b0 +"
0u
b10111 !
b10111 ,
b10111 ;
b10111 V
b10111 d
b10111 s
b10111 ,"
b100000 '
b100000 5
b100000 J
b100000 T
b100000 i
b100000 p
0F
b1111 4
b1111 G
b1111 ]
b1111 q
b1111 #"
b1 B
b1 ^
b1 f
10
0:
b100000 M
b100000 Q
b1 D
b1 Y
b100 7
b100 a
b10 E
b10 R
b10 U
b10 X
b0 #
b0 .
b0 =
b0 b
b100011 ?
b100011 Z
b10 r
b100000 C
b100000 h
b10010000000010000000100011 2
b10010000000010000000100011 A
b10010000000010000000100011 g
b10010000000010000000100011 k
b10010000000010000000100011 n
b1 m
b100 $
b100 /
b100 >
b100 j
b100 l
1(
#20
0(
#25
b1100011 &
b1100011 3
b1100011 @
b1100011 ~
0'"
b100001 ""
b1 *"
b1 1"
b1 7"
b1 ="
b1 C"
b100001 N
b0 &"
b0 3"
b1100011 O
b1100011 c
b10 {
b10 %"
b100001 '
b100001 5
b100001 J
b100001 T
b100001 i
b100001 p
b0 !
b0 ,
b0 ;
b0 V
b0 d
b0 s
b0 ,"
b0 B
b0 ^
b0 f
b1 9
b1 _
00
1:
b100001 M
b100001 Q
b1 7
b1 a
b101 #
b101 .
b101 =
b101 b
b11 ?
b11 Z
b100001 C
b100001 h
b10000100000010001010000011 2
b10000100000010001010000011 A
b10000100000010001010000011 g
b10000100000010001010000011 k
b10000100000010001010000011 n
b10 m
b10111 %
b10111 1
b10111 z
b10111 ("
b10111 )"
b1000 $
b1000 /
b1000 >
b1000 j
b1000 l
1(
#30
0(
#35
b0 &
b0 3
b0 @
b0 ~
b10111 ""
b10111 *"
b10111 1"
b10111 7"
b10111 ="
b10111 C"
b10111 N
b0 {
b0 %"
b10111 O
b10111 c
b10111 L
b10111 P
b10111 "
b10111 -
b10111 <
b10111 W
b10111 e
b10111 '
b10111 5
b10111 J
b10111 T
b10111 i
b10111 p
0F
b0 4
b0 G
b0 ]
b0 q
b0 #"
b0 9
b0 _
b0 H
b0 \
b0 M
b0 Q
b0 D
b0 Y
b0 7
b0 a
b100 8
b100 `
b0 E
b0 R
b0 U
b0 X
b100 #
b100 .
b100 =
b100 b
b110011 ?
b110011 Z
b0 r
b0 C
b0 h
b100000001000110011 2
b100000001000110011 A
b100000001000110011 g
b100000001000110011 k
b100000001000110011 n
b11 m
b1100 $
b1100 /
b1100 >
b1100 j
b1100 l
1(
#40
0(
#45
b0 O
b0 c
b0 ""
b0 *"
b0 1"
b0 7"
b0 ="
b0 C"
b0 N
b0 '
b0 5
b0 J
b0 T
b0 i
b0 p
1F
b0 L
b0 P
b0 "
b0 -
b0 <
b0 W
b0 e
b1 H
b1 \
b0 8
b0 `
b0 #
b0 .
b0 =
b0 b
b10011 ?
b10011 Z
b10011 2
b10011 A
b10011 g
b10011 k
b10011 n
b100 m
b10000 $
b10000 /
b10000 >
b10000 j
b10000 l
1(
#50
0(
#55
b101 m
b10100 $
b10100 /
b10100 >
b10100 j
b10100 l
1(
#60
0(
#65
b110 m
b11000 $
b11000 /
b11000 >
b11000 j
b11000 l
1(
#70
0(
#75
b111 m
b11100 $
b11100 /
b11100 >
b11100 j
b11100 l
1(
#80
0(
#85
b1000 m
b100000 $
b100000 /
b100000 >
b100000 j
b100000 l
1(
#90
0(
#95
b1001 m
b100100 $
b100100 /
b100100 >
b100100 j
b100100 l
1(
#100
0(
#105
b1010 m
b101000 $
b101000 /
b101000 >
b101000 j
b101000 l
1(
#110
0(
#115
b1011 m
b101100 $
b101100 /
b101100 >
b101100 j
b101100 l
1(
#120
0(
#125
b1100 m
b110000 $
b110000 /
b110000 >
b110000 j
b110000 l
1(
#130
0(
#135
b1101 m
b110100 $
b110100 /
b110100 >
b110100 j
b110100 l
1(
#140
0(
#145
b1110 m
b111000 $
b111000 /
b111000 >
b111000 j
b111000 l
1(
#150
0(
#155
b1111 m
b111100 $
b111100 /
b111100 >
b111100 j
b111100 l
1(
#160
0(
#165
b10000 m
b1000000 $
b1000000 /
b1000000 >
b1000000 j
b1000000 l
1(
#170
0(
#175
b10001 m
b1000100 $
b1000100 /
b1000100 >
b1000100 j
b1000100 l
1(
#180
0(
#185
b10010 m
b1001000 $
b1001000 /
b1001000 >
b1001000 j
b1001000 l
1(
#190
0(
#195
b10011 m
b1001100 $
b1001100 /
b1001100 >
b1001100 j
b1001100 l
1(
#200
0(
#205
b10100 m
b1010000 $
b1010000 /
b1010000 >
b1010000 j
b1010000 l
1(
#210
0(
#215
b10101 m
b1010100 $
b1010100 /
b1010100 >
b1010100 j
b1010100 l
1(
#220
0(
#225
b10110 m
b1011000 $
b1011000 /
b1011000 >
b1011000 j
b1011000 l
1(
#230
0(
#235
b10111 m
b1011100 $
b1011100 /
b1011100 >
b1011100 j
b1011100 l
1(
#240
0(
#245
b11000 m
b1100000 $
b1100000 /
b1100000 >
b1100000 j
b1100000 l
1(
#250
0(
#255
b11001 m
b1100100 $
b1100100 /
b1100100 >
b1100100 j
b1100100 l
1(
#260
0(
#265
b11010 m
b1101000 $
b1101000 /
b1101000 >
b1101000 j
b1101000 l
1(
#270
0(
#275
b11011 m
b1101100 $
b1101100 /
b1101100 >
b1101100 j
b1101100 l
1(
#280
0(
#285
b11100 m
b1110000 $
b1110000 /
b1110000 >
b1110000 j
b1110000 l
1(
#290
0(
#295
b11101 m
b1110100 $
b1110100 /
b1110100 >
b1110100 j
b1110100 l
1(
#300
0(
#305
b11110 m
b1111000 $
b1111000 /
b1111000 >
b1111000 j
b1111000 l
1(
#310
0(
#315
b11111 m
b1111100 $
b1111100 /
b1111100 >
b1111100 j
b1111100 l
1(
#320
0(
#325
b100000 m
b10000000 $
b10000000 /
b10000000 >
b10000000 j
b10000000 l
1(
#330
0(
#335
b100001 m
b10000100 $
b10000100 /
b10000100 >
b10000100 j
b10000100 l
1(
#340
0(
#345
b100010 m
b10001000 $
b10001000 /
b10001000 >
b10001000 j
b10001000 l
1(
#350
0(
#355
b100011 m
b10001100 $
b10001100 /
b10001100 >
b10001100 j
b10001100 l
1(
#360
0(
#365
b100100 m
b10010000 $
b10010000 /
b10010000 >
b10010000 j
b10010000 l
1(
#370
0(
#375
b100101 m
b10010100 $
b10010100 /
b10010100 >
b10010100 j
b10010100 l
1(
#380
0(
#385
b100110 m
b10011000 $
b10011000 /
b10011000 >
b10011000 j
b10011000 l
1(
#390
0(
#395
b100111 m
b10011100 $
b10011100 /
b10011100 >
b10011100 j
b10011100 l
1(
#400
0(
#405
b101000 m
b10100000 $
b10100000 /
b10100000 >
b10100000 j
b10100000 l
1(
#410
0(
#415
b101001 m
b10100100 $
b10100100 /
b10100100 >
b10100100 j
b10100100 l
1(
#420
0(
#425
b101010 m
b10101000 $
b10101000 /
b10101000 >
b10101000 j
b10101000 l
1(
#430
0(
#435
b101011 m
b10101100 $
b10101100 /
b10101100 >
b10101100 j
b10101100 l
1(
#440
0(
#445
b101100 m
b10110000 $
b10110000 /
b10110000 >
b10110000 j
b10110000 l
1(
#450
0(
#455
b101101 m
b10110100 $
b10110100 /
b10110100 >
b10110100 j
b10110100 l
1(
#460
0(
#465
b101110 m
b10111000 $
b10111000 /
b10111000 >
b10111000 j
b10111000 l
1(
#470
0(
#475
b101111 m
b10111100 $
b10111100 /
b10111100 >
b10111100 j
b10111100 l
1(
#480
0(
#485
b110000 m
b11000000 $
b11000000 /
b11000000 >
b11000000 j
b11000000 l
1(
#490
0(
#495
b110001 m
b11000100 $
b11000100 /
b11000100 >
b11000100 j
b11000100 l
1(
#500
0(
#505
b110010 m
b11001000 $
b11001000 /
b11001000 >
b11001000 j
b11001000 l
1(
